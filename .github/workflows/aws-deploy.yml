name: Build, Push to ECR and Deploy to EC2

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  EC2_HOST: ${{ secrets.EC2_HOST }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Setup known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Create .env file from GitHub secrets
          cat > .env << EOL
          CLIENT_BASE_URL=${{ secrets.CLIENT_BASE_URL }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          SESSION_SECRET=${{ secrets.SESSION_SECRET }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_USER=${{ secrets.REDIS_USER }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CLOUDFLARE_R2_TOKEN=${{ secrets.CLOUDFLARE_R2_TOKEN }}
          CLOUDFLARE_R2_ACCESS_KEY=${{ secrets.CLOUDFLARE_R2_ACCESS_KEY }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY=${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          CLOUDFLARE_R2_ENDPOINT=${{ secrets.CLOUDFLARE_R2_ENDPOINT }}
          CLOUDFLARE_R2_BUCKET=${{ secrets.CLOUDFLARE_R2_BUCKET }}
          CLOUDFLARE_R2_REGION=${{ secrets.CLOUDFLARE_R2_REGION }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_SINGLE_JOB_CREDIT_PRICE_ID=${{ secrets.STRIPE_SINGLE_JOB_CREDIT_PRICE_ID }}
          STRIPE_THREE_JOB_CREDITS_PRICE_ID=${{ secrets.STRIPE_THREE_JOB_CREDITS_PRICE_ID }}
          STRIPE_SPONSORSHIP_PRICE_ID=${{ secrets.STRIPE_SPONSORSHIP_PRICE_ID }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          NODE_ENV=production
          EOL

          # Copy .env file to EC2
          scp .env ubuntu@${{ env.EC2_HOST }}:/home/ubuntu/app/.env

          # SSH into EC2, login to ECR, pull latest image and restart container
          ssh ubuntu@${{ env.EC2_HOST }} "
            # Configure AWS CLI if needed
            aws configure set region ${{ env.AWS_REGION }}

            # Login to ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # Pull the latest image
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest

            # Stop and remove the existing container if it exists
            docker stop creativeseoul || true
            docker rm creativeseoul || true

            # Run the new container
            docker run -d --name creativeseoul -p 3000:3000 --env-file /home/ubuntu/app/.env $ECR_REGISTRY/$ECR_REPOSITORY:latest

            # Clean up old images (optional)
            docker system prune -af
          "
